require "disassembler.disassemblerdefinition"
require "container.tree.binarytree"
require "strings.ascii"

-- Note:
-- TODO: COP0: Status Coprocessor (Not Implemented Yet)
-- TODO: COP1: Floating Point Unit (Not Implemented Yet)

-- J-type instructions (Jumps)
-- 3    22
-- 1    65                        0
-- +----+-------------------------+
-- | op |         target          |
-- +----+-------------------------+
--
-- Target Calculation:
-- PC <- (PC & 0xf0000000) | (target << 2)

--------------------------------------------------------------------------------------------------------
---------------------------------------------- MISC TABLES ---------------------------------------------
--------------------------------------------------------------------------------------------------------
local ControlFlowInstructions = { ["B"] = InstructionFlags.Jump,
				  ["JR"] = InstructionFlags.Return,
				  ["JAL"] = InstructionFlags.Call, ["J"] = InstructionFlags.Call, ["JALX"] = InstructionFlags.Call, ["JALR"] = InstructionFlags.Call, ["BAL"] = InstructionFlags.Call,
				  ["BEQ"] = InstructionFlags.ConditionalJump, ["BEQL"] = InstructionFlags.ConditionalJump, ["BNE"] = InstructionFlags.ConditionalJump, ["BNEL"] = InstructionFlags.ConditionalJump,
				  ["BGEZ"] = InstructionFlags.ConditionalJump, ["BGEZAL"] = InstructionFlags.ConditionalJump, ["BGEZALL"] = InstructionFlags.ConditionalJump, ["BGEZL"] = InstructionFlags.ConditionalJump, 
				  ["BGTZ"] = InstructionFlags.ConditionalJump, ["BGTZL"] = InstructionFlags.ConditionalJump, ["BLEZ"] = InstructionFlags.ConditionalJump, ["BLEZL"] = InstructionFlags.ConditionalJump, 
				  ["BLTZ"] = InstructionFlags.ConditionalJump, ["BLTZAL"] = InstructionFlags.ConditionalJump, ["BLTZALL"] = InstructionFlags.ConditionalJump, ["BLTZL"] = InstructionFlags.ConditionalJump }
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
				  
Mips32Disassembler = DisassemblerDefinition:new("MIPS32 Disassembler")

function Mips32Disassembler:new()
  return setmetatable({ }, { __index = self} )
end

function Mips32Disassembler:analyzeControlFlowArguments(di)
  di.flags = ControlFlowInstructions[di.mnemonic]
  
  for i, arg in ipairs(di.arguments) do
    if arg.category == ArgumentCategory.Address then
      di.target = i
      break
    end
  end  
end

function Mips32Disassembler:analyzeLoadStoreArguments(di)
  if di.arguments[1].category == ArgumentCategory.Register then
    di.destination = 1
  end
  
  if (di.arguments[#di.arguments].category == ArgumentCategory.Immediate) then
    di.source = #di.arguments
  end
end

function Mips32Disassembler:analyzeArguments(di)
  if di.category == InstructionCategory.ControlFlow then
    self:analyzeControlFlowArguments(di)
  -- elseif di.category == InstructionCategory.LoadStore then
    -- self:analyzeLoadStoreArguments(di)
  end
end

function Mips32Disassembler:fetchInstruction(buffer, offset)
  local data = buffer:readType(offset, DataType.UInt32)
  
  for mask, opcodebtree in pairs(self.instructions) do
    local opcode = BitOp:band(data, mask)
    local node = opcodebtree:find(opcode)
    
    if node ~= nil then
      return node.value
    end
  end
  
  return nil
end

function Mips32Disassembler:decodeInstruction(instructiondefinition, buffer, offset)
  local data = buffer:readType(offset, DataType.UInt32)
  local di = self:createInstruction(offset, data, instructiondefinition)
  
  di.size = DataType:sizeOf(DataType.UInt32)
  self:analyzeArguments(di)
  return di;
end

--------------------------------------------------------------------------------------------------------
----------------------------------------- REGISTERS DEFINITION -----------------------------------------
--------------------------------------------------------------------------------------------------------
Mips32GPR = { [00] = "$zero", [01] = "$at", [02] = "$v0",  [03] = "$v1", [04] = "$a0", [05] = "$a1", [06] = "$v2", [07] = "$a3",
	      [08] = "$t0",   [09] = "$t1", [10] = "$t2",  [11] = "$t3", [12] = "$t4", [13] = "$t5", [14] = "$t6", [15] = "$t7", 
	      [16] = "$s0",   [17] = "$s1", [18] = "$s2",  [19] = "$s3", [20] = "$s4", [21] = "$s5", [22] = "$s6", [23] = "$s7", 
	      [24] = "$t8",   [25] = "$r9", [26] = "$k0",  [27] = "$k1", [28] = "$gp", [29] = "$sp", [30] = "$fp", [31] = "$ra" }

--------------------------------------------------------------------------------------------------------
---------------------------- INSTRUCTION SET ARGUMENTS PRE-PROCESS FUNCTIONS ---------------------------
--------------------------------------------------------------------------------------------------------
function processMips32RegArgument(arg)
  return Mips32GPR[arg.rawvalue]
end

function processMips32SizeArgument(arg) 
  return arg.rawvalue - 1  -- MIPS Instruction Set Rerefence says: size - 1
end

function processMips32TargetArgument(arg)
  return BitOp:bor(BitOp:band(arg.instruction.virtualaddress, 0xF0000000), BitOp:lshift(arg.rawvalue, 0x02)) 
end

function processMips32AddressArgument(arg)
  return (arg.instruction.virtualaddress + arg.instruction.size) + BitOp:lshift(arg.rawvalue, 0x02)
end

--------------------------------------------------------------------------------------------------------
--------------------------------- INSTRUCTION SET ARGUMENTS DEFINITION --------------------------------- 
--------------------------------------------------------------------------------------------------------
Mips32RdArgument = InstructionArgument:new(0x0000F800, 0x0B, ArgumentType.String, ArgumentCategory.Register, ", ", nil, processMips32RegArgument)
Mips32RsArgument = InstructionArgument:new(0x03E00000, 0x15, ArgumentType.String, ArgumentCategory.Register, ", ", nil, processMips32RegArgument)
Mips32RtArgument = InstructionArgument:new(0x001F0000, 0x10, ArgumentType.String, ArgumentCategory.Register, ", ", nil, processMips32RegArgument)
Mips32BaseArgument = InstructionArgument:new(0x03E00000, 0x15, ArgumentType.String, ArgumentCategory.Register, nil, ArgumentEncloseType.RoundBracket, processMips32RegArgument)
Mips32CodeArgument = InstructionArgument:new(0x03FFFFC0, 0x06, ArgumentType.Integer, ArgumentCategory.Immediate, ", ")
Mips32OpArgument = InstructionArgument:new(0x0000FFC0, 0x06, ArgumentType.Integer, ArgumentCategory.Immediate, ", ")
Mips32ImmediateArgument = InstructionArgument:new(0x0000FFFF, 0x00, ArgumentType.HexString, ArgumentCategory.Immediate, ", ")
Mips32PosArgument = InstructionArgument:new(0x000007C0, 0x06, ArgumentType.Integer, ArgumentCategory.Immediate, ", ")
Mips32CopFuncArgument = InstructionArgument:new(0x001FFFFF, 0x00, ArgumentType.HexString, ArgumentCategory.Immediate, ", ")
Mips32SaArgument = InstructionArgument:new(0x000007C0, 0x06, ArgumentType.Integer, ArgumentCategory.Immediate, ", ")
Mips32SelArgument = InstructionArgument:new(0x00000007, 0x00, ArgumentType.Integer, ArgumentCategory.Immediate, ", ")
Mips32SizeArgument = InstructionArgument:new(0x0000F800, 0x0B, ArgumentType.Integer, ArgumentCategory.Immediate, ", ", nil, processMips32SizeArgument)
Mips32TargetArgument = InstructionArgument:new(0x03FFFFFF, 0x00, ArgumentType.HexString, ArgumentCategory.Address, ", ", nil, processMips32TargetArgument)
Mips32AddressArgument = InstructionArgument:new(0x0000FFFF, 0x00, ArgumentType.HexString, ArgumentCategory.Address, ", ", nil, processMips32AddressArgument)
Mips32ImplArgument = InstructionArgument:new(0x0000FFFF, 0x00, ArgumentType.HexString, ArgumentCategory.Address, ", ")

--------------------------------------------------------------------------------------------------------
-------------------------------------- INSTRUCTION SET DEFINITION --------------------------------------
--------------------------------------------------------------------------------------------------------
Mips32Disassembler:newInstruction("ADD",0x00000020,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("ADDI",0x20000000,0xFC000000, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("ADDIU",0x24000000,0xFC000000, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("ADDU",0x00000021,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("AND",0x00000024,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("ANDI",0x30000000,0xFC000000, InstructionCategory.Bitwise, Mips32RsArgument, Mips32RtArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("B",0x10000000,0xFFFF0000, InstructionCategory.ControlFlow, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BAL",0x04110000,0xFFFF0000, InstructionCategory.ControlFlow, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BEQ",0x10000000,0xFC000000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32RtArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BEQL",0x50000000,0xFC000000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32RtArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGEZ",0x04010000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGEZAL",0x04110000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGEZALL",0x04130000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGEZL",0x04030000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGTZ",0x1C000000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BGTZL",0x5C000000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLEZ",0x18000000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLEZL",0x58000000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLTZ",0x04000000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLTZAL",0x04100000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLTZALL",0x04120000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BLTZL",0x04020000,0xFC1F0000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BNE",0x14000000,0xFC000000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32RtArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BNEL",0x54000000,0xFC000000, InstructionCategory.ControlFlow, Mips32RsArgument, Mips32RtArgument, Mips32AddressArgument)
Mips32Disassembler:newInstruction("BREAK",0x0000000D,0xFC00003F, InstructionCategory.Debug, Mips32CodeArgument)
Mips32Disassembler:newInstruction("CACHE",0xBC000000,0xFC000000, InstructionCategory.LoadStore, Mips32OpArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("CFC2",0x48400000,0xFFE00000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImplArgument)
Mips32Disassembler:newInstruction("CLO",0x70000021,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("CLZ",0x70000020,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("COP2",0x4A000000,0xFE000000, InstructionCategory.Undefined, Mips32CopFuncArgument)
Mips32Disassembler:newInstruction("CTC2",0x48C00000,0xFFE00000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImplArgument)
Mips32Disassembler:newInstruction("DIV",0x0000001A,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("DIVU",0x0000001B,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("EHB",0x000000C0,0xFFFFFFFF, InstructionCategory.Undefined)
Mips32Disassembler:newInstruction("EXT",0x7C000000,0xFC00003F, InstructionCategory.Arithmetic, Mips32RtArgument, Mips32RsArgument, Mips32PosArgument, Mips32SizeArgument)
Mips32Disassembler:newInstruction("INS",0x7C000004,0xFC00003F, InstructionCategory.Arithmetic, Mips32RtArgument, Mips32RsArgument, Mips32PosArgument, Mips32SizeArgument)
Mips32Disassembler:newInstruction("J",0x08000000,0xFC000000, InstructionCategory.ControlFlow, Mips32TargetArgument)
Mips32Disassembler:newInstruction("JAL",0x0c000000,0xFC000000, InstructionCategory.ControlFlow, Mips32TargetArgument)
Mips32Disassembler:newInstruction("JALR",0x0000F809,0xFC1FFFFF, InstructionCategory.ControlFlow, Mips32RsArgument)
Mips32Disassembler:newInstruction("JALR",0x00000009,0xFC1F07FF, InstructionCategory.ControlFlow, Mips32RdArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("JALX",0x74000000,0xFC000000, InstructionCategory.ControlFlow, Mips32TargetArgument)
Mips32Disassembler:newInstruction("JR",0x00000008,0xFC1FFFFF, InstructionCategory.ControlFlow, Mips32RsArgument)
Mips32Disassembler:newInstruction("LB",0x80000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LBU",0x90000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LH",0x84000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LHU",0x94000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LL",0xC0000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LUI",0x3C000000,0xFFE00000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("LW",0x8C000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LWC2",0xC8000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LWL",0x88000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("LWR",0x98000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("MADD",0x70000000,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MADDU",0x70000001,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MFC0",0x40000000,0xFFE003FC, InstructionCategory.LoadStore, Mips32RtArgument, Mips32RdArgument, Mips32SelArgument)
Mips32Disassembler:newInstruction("MFC2",0x48000000,0xFFE00000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImplArgument)
Mips32Disassembler:newInstruction("MFHI",0x00000010,0xFFFF07FF, InstructionCategory.LoadStore, Mips32RdArgument)
Mips32Disassembler:newInstruction("MFLO",0x00000012,0xFFFF07FF, InstructionCategory.LoadStore, Mips32RdArgument)
Mips32Disassembler:newInstruction("MOVN",0x0000000B,0xFC0007FF, InstructionCategory.LoadStore, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MOVZ",0x0000000A,0xFC0007FF, InstructionCategory.LoadStore, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MSUB",0x70000004,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MSUBU",0x70000005,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MTC0",0x40800000,0xFFE003FC, InstructionCategory.LoadStore,  Mips32RtArgument, Mips32RdArgument, Mips32SelArgument)
Mips32Disassembler:newInstruction("MTC2",0x48800000,0xFFE00000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImplArgument)
Mips32Disassembler:newInstruction("MTHI",0x00000011,0xFC1FFFFF, InstructionCategory.LoadStore, Mips32RsArgument)
Mips32Disassembler:newInstruction("MTLO",0x00000013,0xFC1FFFFF, InstructionCategory.LoadStore, Mips32RsArgument)
Mips32Disassembler:newInstruction("MUL",0x70000002,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MULT",0x00000018,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("MULTU",0x00000019,0xFC00FFFF, InstructionCategory.Arithmetic, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("NOP",0x00000000,0xFFFFFFFF, InstructionCategory.NoOperation)
Mips32Disassembler:newInstruction("NOR",0x00000027,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("OR",0x00000025,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("ORI",0x34000000,0xFC000000, InstructionCategory.Bitwise, Mips32RtArgument, Mips32RsArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("PAUSE",0x00000140,0xFFFFFFFF, InstructionCategory.Debug)
Mips32Disassembler:newInstruction("RDHWR",0x7C00003B,0xFFE007FF, InstructionCategory.Privileged, Mips32RtArgument, Mips32RdArgument)
Mips32Disassembler:newInstruction("RDPGPR",0x41400000,0xFFE007FF, InstructionCategory.Privileged, Mips32RdArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("ROTRV",0x00000046,0xFC0007F, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RtArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("SB",0xA0000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SC",0xE0000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SEB",0x7C000420,0xFFE007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SEH",0x7C000620,0xFFE007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SH",0xA4000000,0xFC000000, InstructionCategory.Arithmetic, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SLL",0x00000000,0xFFE0003F, InstructionCategory.Arithmetic, Mips32RtArgument, Mips32RdArgument, Mips32SaArgument)
Mips32Disassembler:newInstruction("SLLV",0x00000004,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RtArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("SLT",0x0000002A,0xFC0007FF, InstructionCategory.TestCompare, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SLTI",0x28000000,0xFC000000, InstructionCategory.TestCompare, Mips32RtArgument, Mips32RsArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("SLTIU",0x2C000000,0xFC000000, InstructionCategory.TestCompare, Mips32RtArgument, Mips32RsArgument, Mips32ImmediateArgument)
Mips32Disassembler:newInstruction("SLTU",0x0000002B,0xFC0007FF, InstructionCategory.TestCompare, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SRA",0x00000003,0xFFE0003F, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RtArgument, Mips32SaArgument)
Mips32Disassembler:newInstruction("SRAV",0x00000007,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RtArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("SRL",0x00000002,0xFFE0003F, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RtArgument, Mips32SaArgument)
Mips32Disassembler:newInstruction("SRLV",0x00000006,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RtArgument, Mips32RsArgument)
Mips32Disassembler:newInstruction("SUB",0x00000022,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SUBU",0x00000023,0xFC0007FF, InstructionCategory.Arithmetic, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("SW",0xAC000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SWC2",0xE8000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SWL",0xA8000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SWR",0xB8000000,0xFC000000, InstructionCategory.LoadStore, Mips32RtArgument, Mips32ImmediateArgument, Mips32BaseArgument)
Mips32Disassembler:newInstruction("SYSCALL",0x0000000C,0xFC00003F, InstructionCategory.Privileged, Mips32CodeArgument)
Mips32Disassembler:newInstruction("TGE",0x00000030,0xFC00003F, InstructionCategory.Debug, Mips32RsArgument, Mips32RtArgument)  -- TODO: VERIFICARE ARGOMENTI DI QUESTA ISTRUZIONE
Mips32Disassembler:newInstruction("XOR",0x00000026,0xFC0007FF, InstructionCategory.Bitwise, Mips32RdArgument, Mips32RsArgument, Mips32RtArgument)
Mips32Disassembler:newInstruction("XORI",0x38000000,0xFC000000, InstructionCategory.Bitwise, Mips32RtArgument, Mips32RsArgument, Mips32ImmediateArgument)